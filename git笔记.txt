https://gitee.com/chushiyungitee/my-notes.git      105仓库
https://gitee.com/gitee454389344/454notes.git      454仓库
https://github.com/1054294965/othertxt.git




git config --global user.name chushiyun@ehaier.com;
git config --global user.email chushiyun@ehaier.com;

git config --global user.name root;
git config --global user.email 1054294965@qq.com;
==================================================
多邮箱git配置：
ssh-keygen -t rsa -C "1054294965@qq.com" -f ~/.ssh/id_rsa_1054294965;
ssh-keygen -t rsa -C "454389344@qq.com" -f ~/.ssh/id_rsa_454389344;
ssh-keygen -t rsa -C "chushiyun@ehaier.com" -f ~/.ssh/id_rsa_chushiyunehaier;

.ssh下添加config
#gitlab chushiyun@ehaier.com  gitlab.test.ehaier.com  123.56.11.231
host gitlab-ehaier
    hostname  123.56.11.231
    User chushiyun@ehaier.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_chushiyunehaier



========================================================
=============================================
git迁移库：
http://106.12.114.111/ehaier/crm-new.git
http://106.12.114.111/ehaier/crm-old.git
本地新建文件夹crm-old，进入crm-old文件夹，git bash here，输入：
git init;  #初始化为一个git库
git clone --bare http://106.12.114.111/ehaier/crm-old.git  # --bare  不带有工作区的文件
进入crm-old.git文件夹,输入：
git push --mirror http://106.12.114.111/ehaier/crm-new.git
如果出现报错，是因为已经建立了文件，最好是一个纯净的仓库。
================================================

git@gitlab.example.com:eee/e1.git

http://gitlab.example.com/ehaier/crm.git
git://106.12.114.111/ehaier/crm.git
git@106.12.114.111/ehaier/crm.git
ssh://106.12.114.111/ehaier/crm.git
chushiyun@106.12.114.111:eee/test.git
git://git.kernel.org/pub/scm/git/git.git


git://106.12.114.111/eee/test.git
ssh -x git@106.12.114.111 "git-receive-pack 'ehaier/crm.git'"




working
index=cached=staged
history=commit

git clean -f;
git checkout -b master origin/master;     #检出为某个分支，除了new的
git pull origin;     origin是仓库名，不是分支名

git rm a.txt -f; # 彻底删除文件   需要跟踪过

git add *;  #添加所有new文件     和git add .;  是一样的
git reset --hard 4ecae87;  #git彻底还原，直接根据hash还原

reset系列只对跟踪的文件有用：
git reset --soft HEAD^;  #只撤销提交状态，index(modified并且staged)和working都不变
git reset --mixed HEAD^; #重置index(modified但是not staged),不动working
git reset --hard HEAD^; #index和working都动

git reset HEAD a.txt; #撤销add
git reset HEAD a.txt b.txt; #撤销多个add
git reset HEAD *; #撤销所有add
git reset ;     #默认,相当于git reset HEAD *;

# 删除 untracked files
git clean -f
# 连 untracked 的目录也一起删掉
git clean -fd
# 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）
git clean -xfd

列别名：
git config --global alias.logs 'log --pretty=oneline';   #引号中不要加git了
然后执行：git logs;

git config list;
git config --global user.name=chushiyun   #设置变量
git config --global --unset user.name     #删除变量

时间范围:
git log   --after="2018-08-12"  --before="2018-08-14" |wc -l;  #after和since一样    before和until一样

git checkout -- a.txt;   #撤销修改(只要没有add)
git checkout -- a.txt b.txt;  #多文件撤销修改(只要没有add)
git checkout -- *;  #所有文件撤销修改(只要没有add)
已经add的可以通过checkout --;来撤销么?
可以的。  会撤销到上次add后的状态。
=================================================
svn迁移到git:
新建文件夹，进入文件夹，复制user.txt进来
git bash here,输入:
git init;
git svn clone http://repo.ehaier.dev:8000/svn/dev/ehaier-crm/project/crm --authors-file=user.txt --no-metadata my_project;
git log; #查看是否有svn的提交记录
git remote add origin http://gitlab.test.ehaier.com/bigdata/bigdata-crm/crm2.git; #如果需要重新指定  git remote rm origin,然后指定即可
git push --all;
git push --tags;
====================================================

git remote add 454notes https://gitee.com/gitee454389344/454notes.git       添加远程仓库,454notes 不能省略
cmd执行git命令：
git clone url...     git克隆到本地
git clone url...  ddd      git克隆到本地的某个文件夹
git status 查看当前文件状态
git log 查看日志
git log --stat
git log a.txt
git log --oneline   查看简写日志
git log -2   查看最近2条的记录
git add a.txt  或者git update-index --add  a.txt b.txt  跟踪（添加）某个文件
git add --all 或者 git add .   暂存所有文件
git show-branch
git add .     add新增和修改的文件
git add -A    保存所有的修改（new但是没有tracked的文件）
git reset HEAD .     #撤销所有add的文件，包括new的文件

git rm --cached a.txt 删除暂存
git remote  查看远程仓库(只显示名字)
git remote -v   查看远程仓库---详细

git checkout . && git clean -df        放弃所有修改
git clean -df       f强制放弃      d表示也移除目录   如果要溢出用2个f  如-dff


git commit -m "asdfafa"      -m是message，必须要带的(否则报错：Aborting commit due to empty commit message.)
git rm a.txt   删除文件，也是需要git commit -m "asdf"; git push;
git commit和  git commit -a        -a会把没有add的文件也提交

git push --set-upstream origin dev      把dev分支推送到origin     (默认分支)
git branch --set-upstream-to=origin/master

git --version 查看版本
git config --list 或者  git config -l   查看配置列表

git clean -f   撤销新增的文件
git clean -df   撤销新增的文件和文件夹
git clean -nf   查看要撤销哪些新增的文件

语法： diff后面跟的是被比较的内容   如果有第二个参数，表示是用第二个参数来比较第一个参数
git diff一定是traced的对象: (traced=working traced+ index traced)
git diff ; #working 和index的差异
git diff --cached; # index和 history差异
git diff HEAD;  #working 和  history commit -a（也就是所有追踪文件的差异）
git diff 比较差异(git add之后就看不到了，因为git diff是比较工作区和暂存区的差别)
git diff --stat ;   #统计不同
git diff master private --stat;     #master和private 分支有什么不同
git diff ea7cc67 e326e7c --stat;     #2次提交有什么不同
git diff develop:pom.xml dev2:pom.xml  #比较2个分支的文件有什么不同

git log --oneline;
git diff ea7cc67 e326e7c  a.txt  多版本同一文件的对比
git diff ea7cc67 e326e7c --stat;
git diff 02e8fec e326e7c  ea7cc67 a.txt


echo maaa>>a.txt;
git commit -am "maaa";
echo maaa2>>a.txt;
git commit -am "maaa";



git reset --hard HEAD  回退到上一版本
git checkout a.txt    只修改，没有add的文件会还原
git checkout -b private    创建分支并切换到这个分支
git reset HEAD a.txt   放弃add到暂存区，然后再git checkout a.txt即可彻底回复。
git reset --hard 709e6bd6a91eed8f6957d55eb97cc197cdcd4558  回退到某个版本


git stash  放入缓存
git stash list  缓存列表
git stash apply 3  调用缓存(通过序号)
git stash clear
git stash drop stash@{1}   删除缓存
git stash clear;
git stash;
git stash apply stash@{0};     #只有一个add了
git stash list   查看缓存
git stash pop stash@{0}  恢复到某个储藏点（恢复之后这个）   pop和apply区别：pop是切换到这，并删除该stash，apply不删除
git stash apply stash@{0} 恢复到某个储藏点（恢复之后这个）
git stash save "保存1"

git branch -a  查看所有分支
git branch 或者  git branch --list      查看本地分支（不包括master/origin）
git branch    查看当前分支（绿色的就是当前）
git branch -d dev 删除分支
git branch -D dev2 删除没有merge的分支,也可以看作是强制删除
git branch -d -r origin/private 删除远程分支    -r remote  (不要这样写  git branch -d remotes/origin/patch-1)
git branch -vv   查看分支和服务器分支的关系
git log --graph --decorate --oneline --simplify-by-decoration --all      查看分支关系图

git branch -d -r origin/patch-1

合并分支： (先切换到主分支，再合并分支)
git branch master
git merge private


git tag v1.0     创建tag
git tag   查看所有tag
git tag -d v1.0   删除tag
git tag v2.0 adkfakdf1341234        给某次提交打tag
git checkout v1.0     切换标签
git push origin v1.0    v1.0标签提交到服务器
git push origin --tags    提交所有标签
git show v1.0:a.txt   查看v1.0标签下的a.txt文件内容
git tag的使用方法：
git tag tag-1.0.0;     #从当前分支打一个tag
git checkout tag-1.0.0; #切换到tag（tag是不能直接修改的）
git checkout -b fix; #根据tag 创建一个分支   然后开发完毕之后再和其他的进行合并

git show
git show v1.0  查看标签
git show 5ee68f21ae596292b9cbac30f668b8a5fd068f00 a.txt   查看某次提交的某个文件的改动
git show 5ee68f21ae596292b9cbac30f668b8a5fd068f00    不指定文件，表示查看此次提交所有改动
git show HEAD    查看HEAD版本
git show private 查看 private分支的HEAD版本
git show HEAD pom.xml; #查看上个版本pom.xml文件的内容
git shwo HEAD^ pom.xml;  #查看上个版本pom.xml文件的内容


git help -a  查看所有帮助
git help add   查看某条命令的帮助（会用浏览器打开）

git config user.name  或者 git config --get user.name  查看用户名
git config user.email   查看邮箱
git config --global user.name "chushiyun2"     修改用户名
git config --global user.email "11234123@qq.com"    修改邮箱
git config --global web.browser google    设置全局变量
--------------------------
git 解决冲突
git本地修改之后，commit
然后pull，a.txt文件中会有冲突。进入编辑。 然后git add a.txt; git commit -m "asfasdf"; git push;
--------------------------

删除历史记录   用户目录下的.bash_history删除掉即可

报错： error: did you mean `--hard` (with two dashes ?)        是执行git reset的时候--hard  少写了一个横杠

git不支持中文： git config --global core.quotepath false       !!!无效



报错：No manual entry for printf          yum -y install man-pages即可

yum -y  install git
git --version
git config --global user.name "chushiyun"
git config --global user.email "1054294965@qq.com"
git init              到需要成为仓库的dir中执行，这里就是git仓库了
git remote add origin https://gitee.com/chushiyun.git
git remote add origin https://github.com/1054294965/csyframework.git
git fetch report; #从远程库获取代码
git pull report master; #从远程report库master分支获取代码

git fetch origin develop:develop2; # 拉取远程develop分支并在本地创建develop2分支
git diff develop develop2; #然后对比2个分支

git    重复输入账号密码
git config --global credential.helper store    命令   在用户所在目录输入
cat .gitconfig   发现多了[credential]  helper = store    输入一次以后不用再次输入密码了

修改后的提交：
#git add .
#git commit -m '提交说明' .
#git push origin master


git config --global user.name 454389344
git config --global user.email 454389344@qq.com
git config --global crendential.helper store


git checkout a.txt    已修改未提交（暂存区）  放弃修改

git show HEAD^   parent节点
git show HEAD^^  上上级parent
git show HEAD~4  great-great grandparent of HEAD

git grep "hello"    当前分支搜索hello
git grep "hello" private    private分支搜索hello    最后一个参数可以是tag

git cat-file -t .git/objects/6f/4b861ef550af75e5329cff30551b6cf7a7cfc1

报错： Error detected while processing /root/.vimrc:
vim ~/.bashrc;
添加export EDITOR=/usr/bin/vim;

git reset --soft HEAD^  撤回最近一次提交


git push --tags   推送所有标签
git fetch origin v0.1     获取标签

===================
test1
echo 111>>111.txt
echo 222 >>222.txt
echo 333 >>333.txt
echo new >>new.txt
echo add >>add.txt;   git add add.txt;
echo commit >>commit.txt;   git add commit.txt;  git commit commit.txt -m "提交commit.txt";




还原：
 ls |xargs rm -rf;    # 删除所有文件
 git commit . -m  "rm all";
 git push -u origin master;

====================
test2  合并
echo -e "aaaaaaaa\nbbbbbbbb\nccccccccc\ndddddddd\neeeeeee\nffffffff\ngggggggg">a.txt;
cp -nf a.txt b.txt;
cp -nf a.txt c.txt;
cp -nf a.txt d.txt;
cp -nf a.txt e.txt;
cp -nf a.txt f.txt;
cp -nf a.txt g.txt;


git checkout -b develop;
echo -e "22222bbbbb\nccccccccc\ndddddddd\neeeeeee\nffffffff\ngggggggg\nhhhhhhh">a.txt    # 减首行，增尾行 改2行


rm -rf a.txt b.txt c.txt d.txt e.txt f.txt g.txt;
=====================
test3  实际测试
初始化
touch a.txt b.txt c.txt;
git push -u origin master;

tags=`git tag`; git tag -d $tags; git push origin:refs/tags/$tags;
tags=`git tag`;
git tag -d $tags; git push origin:refs/tags/$tags;


git tag -a v0.1 -m "v0.1 tag";
git push --tags; # 推送所有标签  git push origin --tags; #也可
git push origin tagv1.0; #推送单个标签



开发1，2
echo "develop update1" >a.txt;git commit -a -m "develop update1";
echo "develop update2" >a.txt;git commit -a -m "develop update2";

开发新功能
git checkout -b "major-feature";
echo "major-feature update1" >> major-feature.txt;
git commit -a -m "major-feature update1";
echo "major-feature update2" > major-feature.txt;
git commit -a -m "major-feature update2";

未来功能
git checkout -b "future-feature";
echo "future-feature update1" >> future-feature.txt;
git commit -a -m "major-feature update1";
git checkout -b "future-feature";
echo "future-feature update2" >> future-feature.txt;
git commit -a -m "major-feature update2";
git checkout -b "future-feature";
echo "future-feature update3" >> future-feature.txt;
git commit -a -m "major-feature update3";

开发分支3，4
echo "develop update3" >a.txt;git commit -a -m "develop update3";
echo "develop update4" >a.txt;git commit -a -m "develop update4";

切换到tagv0.1，修复,发布为0.2，并合并到develop分支
git fetch origin v0.1;
echo "hotfix update1">>b.txt;  git commit -a -m "b hotfix update1";
git tag -a v0.2 -m "v0.2 tag";
git checkout -b develop; git merge tag0.2;

开发分支5
echo "develop update5" >a.txt;git commit -a -m "develop update5";

合并major到开发
git merge major-feature;

git merge dev2;   #自动合并   如果2个都是新增，而且是同一行，视为没有冲突，那么会自动合并（同一行进行的修改没法判断使用哪个会引起冲突）
git checkout -b release-1.2 develop;
echo "release update1" >>c.txt;
git commit -a -m "c release update1";

git checkout develop;
git merge release1.2;
git checkout major-release;

继续开发major
git checkout -b "major-feature";
echo "major-feature update3" >> major-feature.txt;
git commit -a -m "major-feature update4";
echo "major-feature update4" > major-feature.txt;
git commit -a -m "major-feature update4";

release bug修复
git checkout release1.2;
echo "release1.2 update2" >>c.txt;
echo "release1.2 update3" >>c.txt;
git commit -a -m "c release1.2 update2 update3";

git checkout develop;
git merge release1.2;
git tag -a v1.0 -m "v1.0 tag";

git merge major-release;
git merge future-release;

checkout 不能用简写的hash。

git单文件提交：
git add a.txt b.txt;      #不要用.    因为会提交所有
git commit a.txt b.txt -m "";   #不要用-a，会提交未add的文件

git commit -a和 git commit .     ??    (没有没有git commit .)
-a可以提交所有追踪过的文件，不用再add了。

修改还是add：
前缀都是modified,但是修改的是changes not staged for commit,  add的是 changes to be commit

git --help --all;  #git所有命令  或者git help -a; git help -l;

git常用命令列表：
The most commonly used git commands are:
  add        Add file contents to the index
  bisect     Find by binary search the change that introduced a bug
  branch     List, create, or delete branches
  checkout   Checkout a branch or paths to the working tree
  clone      Clone a repository into a new directory
  commit     Record changes to the repository
  diff       Show changes between commits, commit and working tree, etc
  fetch      Download objects and refs from another repository
  grep       Print lines matching a pattern
  init       Create an empty Git repository or reinitialize an existing one
  log        Show commit logs
  merge      Join two or more development histories together
  mv         Move or rename a file, a directory, or a symlink
  pull       Fetch from and merge with another repository or a local branch
  push       Update remote refs along with associated objects
  rebase     Forward-port local commits to the updated upstream head
  reset      Reset current HEAD to the specified state
  rm         Remove files from the working tree and from the index
  show       Show various types of objects
  status     Show the working tree status
  tag        Create, list, delete or verify a tag object signed with GPG

git show master:a.txt origin/master:a.txt origin/master:b.txt ; # show 查看多个文件的内容
git show next~4:a.txt; #命令不对
yum downloader --source=coreutils-8.22-18.el7.x86_64
============================
git仓库迁移到git仓库： (这样迁移不带版本记录)
git remote rm origin;
git remote add origin http://gitlab.test.ehaier.com/chushiyunehaier/person-crm.git;
git add . ;
git commit -m '迁移库';
git config http.postBuffer  524288000;
git push -u origin master;
如果出现error: RPC failed; HTTP 411 curl 22 The requested URL returned error: 411 Length Required(出现这个错误的原因是git 通过http post的大小有限制，应该调大一些就可以了)
调整post大小：git config http.postBuffer  524288000;然后执行  git push -u origin master;
=================================
git往分支提交的过程:
git checkout dev1;
git branch;
修改data_list文件
git add data_list.vm;
git commit -m "c";
git push origin dev1;
浏览器：（这是dev分支）
http://gitlab.test.ehaier.com/bigdata/bigdata-report/report/blob/dev1/src/main/webapp/WEB-INF/views/report/data_list.vm
查看文件似否改变
====================================
 git push origin --delete patch-1;      删除远程分支(有效)

 =====================================
 git全局忽略文件(这个只是指定全局用哪个忽略文件)
 git config --global core.excludesfile ~/.gitignore

 文件内容：
 /log.txt
 /log.txt
 /target/
 /bin/
 /target/
 .classpath
 .gitignore
 .project
 .settings/
 =====================================
 ==============================
 git checkout -b local
 git push -u origin local


重要分支：
master  正式分支
develop  开发分支
辅助分支：
feature  功能分支
release  测试分支
local  本地话配置分支
开发的时候git checkout develop;即可
========================================================
.gitignore忽略规则的匹配语法
在 .gitignore 文件中，每一行的忽略规则的语法如下：
1）空格不匹配任意文件，可作为分隔符，可用反斜杠转义
2）以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。
3）可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。
4）以斜杠"/"开头表示目录；"/"结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；"/"开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。
5）以星号"*"通配多个字符，即匹配多个任意字符；使用两个星号"**" 表示匹配任意中间目录，比如`a/**/z`可以匹配 a/z, a/b/z 或 a/b/c/z等。
6）以问号"?"通配单个字符，即匹配一个任意字符；
7）以方括号"[]"包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母）。
8）以叹号"!"表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用"!"规则是不起作用的。也就是说"!"开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用"!"也不会再次被包含。可以使用反斜杠进行转义。

需要谨记：git对于.ignore配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；


github搜索技巧:
location:china
language:javascript
awesome + 关键字  可以找到神奇的网站
stars: 500      收藏数量超过500的
forks: 500  分支数量超过500的
