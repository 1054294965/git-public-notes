替换空行：
^(\s*)\n
^\s*\n  也可
搜索：boot prefix
prefix\s?=\s?"spring.datasource
-------------------------
打印语句：
console.log("reg.lastIndex: %s",reg.lastIndex)
console.log("RegExp.lastMatch: %s",RegExp.lastMatch)
console.log("RegExp.leftContext: %s",RegExp.leftContext)
console.log(RegExp.input)
console.log(RegExp.$1)
console.log(RegExp.$2)

---------
循环匹配： 要加括号的
var x = "acom bcom ccom";
var re = /(\w?)com/g;
while( tempR = re.exec(x))
{
 console.log(tempR[1]);
}
--------------------
$1-$9:   匹配的结果     ---注意不是$0-$9  没有$0
var re = /(\w+)\s(\w+)/;
var str = 'John Smith';
re.exec(str, '$2, $1'); // "Smith, John"  ---后面的'$2, $1' 没有任何用

console.log(RegExp.$1); // "John"
console.log(RegExp.$2);
-------------------------
$_表示什：     表示输入的字符串
--------------------------
匹配所有的单词：
 var str="1.tom:'what's your name.' 1.汤姆：“你的名字是什么？”";
str.match(/[a-zA-Z]+/ig);
------------------------------
跟踪正则结果，  需要用小括号:
var str="1.tom:'what's your name.' 1.汤姆：“你的名字是什么？”";
var reg=/([a-zA-Z]+)/ig;
while(( result=reg.exec(str)!=null)){
    console.log(RegExp.$1)
}

---------------
下标： regobj.lastIndexOf     ---是regObj，不是Regexp，只有在使用了(g)才有效，否则会无限循环。
var str="1.tom:'what's your name.' 1.汤姆：“你的名字是什么？”";
var reg=/([a-zA-Z]+)/ig;
console.log(reg.lastIndex)
console.log("RegExp.lastMatch%s: ",RegExp.lastMatch)
while(( result=reg.exec(str)!=null)){
     console.log("reg.lastIndex: %s",reg.lastIndex)
     console.log("RegExp.lastMatch: %s",RegExp.lastMatch)
    console.log(RegExp.$1)
}


------------------
global的作用：   如果不加，每次exec之后。lastIndex都会置0，表示从新开始检索。  如果在while中，那么会无限循环，卡死。
source的作用： 返回正则的string，不包括flags(igmuy)
leftContext和lastIndex区别:     lastIndex是下次开始查找的位置。leftContext是上次匹配的元素左边的内容；

exec和match： match是一次性返回所有匹配的结果。exec是每执行一次，匹配一个结果，直到执行完毕。


--------------
获取匹配和非获取匹配：
()     获取匹配
(?:)  非获取匹配    ---非获取匹配不是预查，不消耗字符串
(?=)  预查(肯定预查)
(?<=) 反向预查
(?!)  否定预查(否定预查)
(?<!)  反向否定预查


获取匹配和非获取匹配： ()包围的才可以用$1-n来获取。只要()中有?，就表示非获取匹配，就是不能用$1-n来表示

----------------------------
预查不消耗字符什么意思：
获取匹配： $1能获取结果
var string="windowswindows95windows2000";
var reg=/windows(w|95)/g;
console.log(string.match(reg))
console.log(RegExp.$1)
------------------------------------
非获取匹配:     $1不能获取结果
var string="windowswindows95windows2000";
var reg=/windows(?:w|95)/g;
console.log(string.match(reg))
console.log(RegExp.$1)
-------------------------------------
预查：  不消耗w，查出2个结果
var string="windowswindows95windows2000";
var reg=/windows(?=w|95)/g;
console.log(string.match(reg))
console.log(RegExp.$1)
------------------------------
反向预查：
var string="windowswindows95windows2000";
var reg=/(?<=w|95)windows/g;     //注意(?<=w|95)  是在windows的左边
console.log(string.match(reg))
console.log(RegExp.$1)
--------------------------------------
否定预查：
var string="windowswindows95windows2000";
var reg=/windows(?!w|95)/g;     //注意(?<=w|95)  是在windows的左边
console.log(string.match(reg))
console.log(RegExp.$1)
----------------------------
反响否定预查：
var string="windowswindows95windows2000";
var reg=/(?<!w|95)windows/g;     //注意(?<=w|95)  是在windows的左边
console.log(string.match(reg))
console.log(RegExp.$1)
------------------------------------------
删除console.log:        (//)?console.log\((.*)\);?


贪婪模式：          默认是贪婪模式        如果不想要单个的最少匹配可以用()括起来
var string="aaaaaaaaaaa";
var reg=/a+/g;
console.log(string.match(reg))
非贪婪模式：     当? 跟在限定符后面的时候，就是非贪婪模式
var string="aaaaaaaaaaa";
var reg=/a+?/g;
console.log(string.match(reg))

[31-35]  可以选择31-35之间的数字么：   不能，[]只是匹配其中的单个字符
[3-9][0-9]  大于30的数字
